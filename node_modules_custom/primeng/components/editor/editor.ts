import {Component, ElementRef, AfterViewInit, OnDestroy, Input, Output, EventEmitter, ContentChild, OnChanges, SimpleChange, forwardRef, Provider} from '@angular/core';
import {Header} from '../common/header'
import {DomHandler} from '../dom/domhandler';
import {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/common';
//import {CONST_EXPR} from 'angular2/src/facade/lang';

declare var Quill: any;
/*
const EDITOR_VALUE_ACCESSOR: Provider = CONST_EXPR(
    new Provider(NG_VALUE_ACCESSOR, {
        useExisting: forwardRef(() => Editor),
        multi: true
    })
);*/

const EDITOR_VALUE_ACCESSOR: Provider = new Provider(NG_VALUE_ACCESSOR, {
    useExisting: forwardRef(() => Editor),
    multi: true
});


@Component({
    selector: 'p-editor',
    template: `
        <div [ngClass]="'ui-widget ui-editor-container ui-widget-content ui-corner-all'" [attr.style]="style" [attr.class]="styleClass">
            <div class="ui-editor-toolbar ui-widget-header ui-corner-top" *ngIf="toolbar">
                <ng-content select="header"></ng-content>
            </div>
            <div class="ui-editor-toolbar ui-widget-header ui-corner-top" *ngIf="!toolbar">
            <span class="ql-format-group">
                <select title="Font" class="ql-font">
                    <option value="sans-serif" selected="">Sans Serif</option>
                    <option value="serif">Serif</option>
                    <option value="monospace">Monospace</option>
                </select>
                <select title="Size" class="ql-size">
                    <option value="10px">Small</option>
                    <option value="13px" selected="">Normal</option>
                    <option value="18px">Large</option>
                    <option value="32px">Huge</option>
                </select>
                </span>
                <span class="ql-format-group">
                    <span title="Bold" class="ql-format-button ql-bold"></span>
                    <span class="ql-format-separator"></span>
                    <span title="Italic" class="ql-format-button ql-italic"></span>
                    <span class="ql-format-separator"></span>
                    <span title="Underline" class="ql-format-button ql-underline"></span>
                    <span class="ql-format-separator"></span>
                    <span title="Strikethrough" class="ql-format-button ql-strike"></span>
                </span>
                <span class="ql-format-group">
                    <select title="Text Color" class="ql-color">
                        <option value="rgb(0, 0, 0)" label="rgb(0, 0, 0)" selected=""></option>
                        <option value="rgb(230, 0, 0)" label="rgb(230, 0, 0)"></option>
                        <option value="rgb(255, 153, 0)" label="rgb(255, 153, 0)"></option>
                        <option value="rgb(255, 255, 0)" label="rgb(255, 255, 0)"></option>
                        <option value="rgb(0, 138, 0)" label="rgb(0, 138, 0)"></option>
                        <option value="rgb(0, 102, 204)" label="rgb(0, 102, 204)"></option>
                        <option value="rgb(153, 51, 255)" label="rgb(153, 51, 255)"></option>
                        <option value="rgb(255, 255, 255)" label="rgb(255, 255, 255)"></option>
                        <option value="rgb(250, 204, 204)" label="rgb(250, 204, 204)"></option>
                        <option value="rgb(255, 235, 204)" label="rgb(255, 235, 204)"></option>
                        <option value="rgb(255, 255, 204)" label="rgb(255, 255, 204)"></option>
                        <option value="rgb(204, 232, 204)" label="rgb(204, 232, 204)"></option>
                        <option value="rgb(204, 224, 245)" label="rgb(204, 224, 245)"></option>
                        <option value="rgb(235, 214, 255)" label="rgb(235, 214, 255)"></option>
                        <option value="rgb(187, 187, 187)" label="rgb(187, 187, 187)"></option>
                        <option value="rgb(240, 102, 102)" label="rgb(240, 102, 102)"></option>
                        <option value="rgb(255, 194, 102)" label="rgb(255, 194, 102)"></option>
                        <option value="rgb(255, 255, 102)" label="rgb(255, 255, 102)"></option>
                        <option value="rgb(102, 185, 102)" label="rgb(102, 185, 102)"></option>
                        <option value="rgb(102, 163, 224)" label="rgb(102, 163, 224)"></option>
                        <option value="rgb(194, 133, 255)" label="rgb(194, 133, 255)"></option>
                        <option value="rgb(136, 136, 136)" label="rgb(136, 136, 136)"></option>
                        <option value="rgb(161, 0, 0)" label="rgb(161, 0, 0)"></option>
                        <option value="rgb(178, 107, 0)" label="rgb(178, 107, 0)"></option>
                        <option value="rgb(178, 178, 0)" label="rgb(178, 178, 0)"></option>
                        <option value="rgb(0, 97, 0)" label="rgb(0, 97, 0)"></option>
                        <option value="rgb(0, 71, 178)" label="rgb(0, 71, 178)"></option>
                        <option value="rgb(107, 36, 178)" label="rgb(107, 36, 178)"></option>
                        <option value="rgb(68, 68, 68)" label="rgb(68, 68, 68)"></option>
                        <option value="rgb(92, 0, 0)" label="rgb(92, 0, 0)"></option>
                        <option value="rgb(102, 61, 0)" label="rgb(102, 61, 0)"></option>
                        <option value="rgb(102, 102, 0)" label="rgb(102, 102, 0)"></option>
                        <option value="rgb(0, 55, 0)" label="rgb(0, 55, 0)"></option>
                        <option value="rgb(0, 41, 102)" label="rgb(0, 41, 102)"></option>
                        <option value="rgb(61, 20, 102)" label="rgb(61, 20, 102)"></option>
                    </select>
                    <span class="ql-format-separator"></span>
                    <select title="Background Color" class="ql-background">
                        <option value="rgb(0, 0, 0)" label="rgb(0, 0, 0)"></option>
                        <option value="rgb(230, 0, 0)" label="rgb(230, 0, 0)"></option>
                        <option value="rgb(255, 153, 0)" label="rgb(255, 153, 0)"></option>
                        <option value="rgb(255, 255, 0)" label="rgb(255, 255, 0)"></option>
                        <option value="rgb(0, 138, 0)" label="rgb(0, 138, 0)"></option>
                        <option value="rgb(0, 102, 204)" label="rgb(0, 102, 204)"></option>
                        <option value="rgb(153, 51, 255)" label="rgb(153, 51, 255)"></option>
                        <option value="rgb(255, 255, 255)" label="rgb(255, 255, 255)" selected=""></option>
                        <option value="rgb(250, 204, 204)" label="rgb(250, 204, 204)"></option>
                        <option value="rgb(255, 235, 204)" label="rgb(255, 235, 204)"></option>
                        <option value="rgb(255, 255, 204)" label="rgb(255, 255, 204)"></option>
                        <option value="rgb(204, 232, 204)" label="rgb(204, 232, 204)"></option>
                        <option value="rgb(204, 224, 245)" label="rgb(204, 224, 245)"></option>
                        <option value="rgb(235, 214, 255)" label="rgb(235, 214, 255)"></option>
                        <option value="rgb(187, 187, 187)" label="rgb(187, 187, 187)"></option>
                        <option value="rgb(240, 102, 102)" label="rgb(240, 102, 102)"></option>
                        <option value="rgb(255, 194, 102)" label="rgb(255, 194, 102)"></option>
                        <option value="rgb(255, 255, 102)" label="rgb(255, 255, 102)"></option>
                        <option value="rgb(102, 185, 102)" label="rgb(102, 185, 102)"></option>
                        <option value="rgb(102, 163, 224)" label="rgb(102, 163, 224)"></option>
                        <option value="rgb(194, 133, 255)" label="rgb(194, 133, 255)"></option>
                        <option value="rgb(136, 136, 136)" label="rgb(136, 136, 136)"></option>
                        <option value="rgb(161, 0, 0)" label="rgb(161, 0, 0)"></option>
                        <option value="rgb(178, 107, 0)" label="rgb(178, 107, 0)"></option>
                        <option value="rgb(178, 178, 0)" label="rgb(178, 178, 0)"></option>
                        <option value="rgb(0, 97, 0)" label="rgb(0, 97, 0)"></option>
                        <option value="rgb(0, 71, 178)" label="rgb(0, 71, 178)"></option>
                        <option value="rgb(107, 36, 178)" label="rgb(107, 36, 178)"></option>
                        <option value="rgb(68, 68, 68)" label="rgb(68, 68, 68)"></option>
                        <option value="rgb(92, 0, 0)" label="rgb(92, 0, 0)"></option>
                        <option value="rgb(102, 61, 0)" label="rgb(102, 61, 0)"></option>
                        <option value="rgb(102, 102, 0)" label="rgb(102, 102, 0)"></option>
                        <option value="rgb(0, 55, 0)" label="rgb(0, 55, 0)"></option>
                        <option value="rgb(0, 41, 102)" label="rgb(0, 41, 102)"></option>
                        <option value="rgb(61, 20, 102)" label="rgb(61, 20, 102)"></option>
                    </select>
                </span>
                <span class="ql-format-group">
                    <span title="List" class="ql-format-button ql-list"></span>
                    <span class="ql-format-separator"></span>
                    <span title="Bullet" class="ql-format-button ql-bullet"></span>
                    <span class="ql-format-separator"></span>
                    <select title="Text Alignment" class="ql-align">
                        <option value="left" label="Left" selected=""></option>
                        <option value="center" label="Center"></option>
                        <option value="right" label="Right"></option>
                        <option value="justify" label="Justify"></option>
                        </select>
                </span>
                <span class="ql-format-group">
                <span title="Link" class="ql-format-button ql-link"></span>
                </span>
            </div>
            <div class="ui-editor-content" [innerHTML]="value||''"></div>
        </div>
    `,
    directives: [Header],
    providers: [DomHandler, EDITOR_VALUE_ACCESSOR]
})
export class Editor implements AfterViewInit, OnDestroy, ControlValueAccessor {

    hashValue: string;

    @Output() onTextChange: EventEmitter<any> = new EventEmitter();

    //@Output() onSelectionChange: EventEmitter<any> = new EventEmitter();

    @ContentChild(Header) toolbar;

    @Input() style: string;

    @Input() styleClass: string;

    @Input() isFocus: boolean;

    @Input() existingTag: string;

    @Input() indexValue: number;

    @Input() tags: any[] = [];

    value: string;

    onModelChange: Function = () => { };

    onModelTouched: Function = () => { };

    selfChange: boolean;

    quill: any;

    constructor(private el: ElementRef, private domHandler: DomHandler) { }

    ngAfterViewInit() {
        let editorElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-content');
        let toolbarElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-toolbar');

        this.quill = new Quill(editorElement, {
            modules: { toolbar: toolbarElement },
            theme: 'snow',
            styles: {
                'body': {
                    'font-family': "'Helvetica Neue', Helvetica, Arial, sans-serif",
                    'font-size': '18px',
                    'line-height': '20px',
                },
                'span.test': {
                    'color': 'rgb(0, 0, 77)',
                    'font-style': 'italic',
                    'background-color': 'rgb(255, 255, 255)',
                    'text-align': 'left',
                    'font-size': '13px',
                    'font-family': 'sans-serif',
                },
                'span.untest': {
                    'font-size': '13px',
                    'font-family': 'sans-serif',
                    'color': 'rgb(0, 0, 0)',
                    'background-color': 'rgb(255, 255, 255)',
                    'text-align': 'left',
                    'font-style': 'normal'


                }
            }
        });

        this.quill.addFormat('cssClass', {
            tag: 'span',
            attribute: 'class'
        });

        this.quill.on('selection-change', function (range) {
            if (range) {
                if (range.start == range.end) {
                    console.log('User cursor is on', range.start);
                } else {
                    var text = this.quill.getText(range.start, range.end);
                    console.log('User has highlighted', text);
                }
            }
            //else {
            //    var textChanged = this.quill.getText();
            //    this.onSelectionChange.emit({
            //        text: textChanged
            //    });
            //    console.log('Cursor not in the editor');
            //}
        });

        this.quill.on('text-change', (delta, source) => {
            if (source == 'user') {
                var isdelete = delta.ops[1];
                if (isdelete == null)
                {
                    isdelete = delta.ops[0];
                }

                if (isdelete.delete != 1)
                    this.highlightText(delta);

                this.selfChange = true;
                let htmlValue = this.quill.getHTML();
                if (htmlValue == '<div><br></div>') {
                    htmlValue = null;
                }

                this.onTextChange.emit({
                    htmlValue: htmlValue,
                    textValue: this.quill.getText(),
                    hashValue: this.hashValue,
                    delta: delta,
                    source: source
                });

                this.onModelChange(htmlValue);
            }
        });

        if (this.value) {
            this.quill.setHTML(this.value);
        }

    }

    highlightText(delta) {
        var text = this.quill.getText(),
            hashRegex = /(#[a-z\d\.\^\$\*\+\?\(\{\\\|\@)[\w-]*\s)/ig,
            match;

        // Try to clear all cssClass formats
        //this.quill.formatText(0, this.quill.getLength(), 'cssClass', 'untest');
        this.hashValue = "";
        var isExists = false;
        var index, spacetext, isdelete;

        index = delta.ops[0].retain;
        if (index == null) {
            index = 0;
            spacetext = delta.ops[0].insert;
        }
        else {
            spacetext = delta.ops[1].insert;
            //isdelete = delta.ops[1].delete;
        }

        while (match = hashRegex.exec(text.slice(0, -1))) {
            isExists = true;
            var textSlashes = match[0];
            //var newText = textSlashes.replace(/[\#]/g, "");
            //this.quill.deleteText(match.index, match.index + match[0].length);
            //this.quill.insertText(match.index, newText, {
            //    'italic': true,
            //    'fore-color': '#FF0000',
            //    'bold': true
            //});
            if (isdelete != 1) {
                this.quill.deleteText(match.index, match.index + 1);
            }
            this.quill.formatText(match.index, match.index + match[0].length -2, 'cssClass', 'test');
          
            var tagName = textSlashes.slice(1, -1);
            this.hashValue = tagName;
            //var textLenth = match[0].length - 2;
            // this.quill.deleteText(match.index + textLenth, match.index + textLenth + 1);

            // var text1 = text.replace(/(\r\n|\n|\r)/gm, "");
            //var newText = text.replace(/[\/]/g, "");
            // this.quill.setText(newText);
            //  this.quill.formatText(match.index + textLenth + 1, match.index + textLenth + 1, 'cssClass', false);
            //this.quill.focus();
            //this.quill.prepareFormat('bold', false);
        }

        if (!isExists) {

            //this.quill.formatText(index, index + spacetext.length, 'cssClass', 'untest');
            //this.quill.deleteText(index, index + text.length);
            //this.quill.insertText(index, text);

        }




        // $("#output").val(editor.getHTML());
    }

    writeValue(value: any): void {
        this.value = value;
    }

    registerOnChange(fn: Function): void {
        this.onModelChange = fn;
    }

    registerOnTouched(fn: Function): void {
        this.onModelTouched = fn;
    }

    ngOnChanges(changes: { [key: string]: SimpleChange }) {
        if (this.quill) {
            for (var key in changes) {
                if (key == 'isFocus') {
                    let val = changes[key].currentValue;
                    if (val)
                        this.quill.focus();

                }
                if (key == 'existingTag') {

                    let val = changes[key].currentValue;
                    if (val)
                        this.quill.formatText(this.indexValue - val.length, this.indexValue, 'cssClass', 'test');
                    //else
                    //    this.quill.setTexst('');

                }
                if (key == 'indexValue') {

                    let val = changes[key].currentValue;
                    if (val)
                        this.indexValue = val;
                    //else
                    //    this.quill.setTexst('');

                }
            }
        }
    }

    ngOnDestroy()  {
        if (this.quill) {
            this.quill.destroy();
        }
    }
}